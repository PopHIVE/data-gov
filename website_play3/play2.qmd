---
title: "Y"
title-block-banner: "#0c233f"
format: html
editor: visual
ojs: true
css: styles.css
server: shiny
---

```{r setup, include=FALSE}
#| context: setup
#| include: false

library(tidyverse)
library(plotly)
library(shiny)
library(tidyverse)
library(scales)
library(janitor)
library(MMWRweek)
library(arrow)
#library(rnaturalearth)
library(parquetize)
library(viridisLite)
library(tigris)
library(usmap)
library(cowplot)
library(viridis)
library(sf)
library(readxl)
library(ggalluvial)
#library(cdcfluview)
#install.packages("remotes")
#remotes::install_github("hrbrmstr/cdcfluview")
#hhs_regions$state <- state.abb[match(hhs_regions$state_or_territory,state.name)]
#state.hhs.codes <- aggregate(hhs_regions$state, #list(hhs_regions$region), paste, collapse=",")
#state.hhs.codes$x <- gsub('NA,','',state.hhs.codes$x)
#state.hhs.codes$x <- gsub(',NA','',state.hhs.codes$x)
#saveRDS(state.hhs.codes, './hhs_regions.rds')

yale_colors <- c(
  "#00356B",
  "#286DC0",
  "#63AAFF",
  "#C4DDFC",
  "#DDDDDD"
)

yale_gradient <- c("#DDDDDD",
                   "#C4DDFC",
                   "#63AAFF",
                   "#286DC0",
                   "#00356B") # Adjust order for your desired gradient


#datasets for use in the global environment



# states <- ne_states(country = "United States of America", returnclass = "sf")
# state_centers <- centers <- st_centroid(states) |> 
#   st_coordinates() |> 
#   as.data.frame() |>
#   cbind(State = states$name)
```

```{ojs}
// Load the datasets
rsv1_tests = FileAttachment("./Data/rsv_testing.parquet").json();
key = FileAttachment("./Data/hhs_regions.rds").json();
```

```{ojs}
// Function to parse and filter data
function processData(data, key) {
  data.forEach(d => {
    d.date = new Date(d.mmwrweek_end.split(' ')[0]);
    d.postdate = new Date(d.posted.split(' ')[0]);
  });
  
  const latestDate = new Date(Math.max.apply(null, data.map(d => d.postdate)));
  
  data = data.filter(d => d.postdate.getTime() === latestDate.getTime() && d.level !== 'National');
  
  data.forEach(d => {
    const keyEntry = key.find(k => k['Group.1'] === d.level);
    d.scaled_cases = d.pcr_detections / Math.max.apply(null, data.map(dd => dd.pcr_detections));
    d.hhs_abbr = keyEntry ? keyEntry.x : null;
  });
  
  return data;
}

rsv_ts = processData(rsv1_tests, key);
```

```{ojs}
// Create a dropdown input for HHS region selection
import { Inputs } from "@observablehq/inputs";

viewof region = Inputs.select(rsv_ts.map(d => d.hhs_abbr).filter(unique => unique), { label: "HHS Region:", value: "CT,ME,MA,NH,RI,VT" });
```

```{ojs}
// Ensure unique selection values in the dropdown
uniqueRegions = [...new Set(rsv_ts.map(d => d.hhs_abbr))];
```

```{ojs}
// Define the filtered and scaled data based on the selected input
filteredData = {
  const reg = region.value;
  const maxEpiYear = Math.max.apply(null, rsv_ts.map(dd => dd.epiyr));
  const maxEpiWeek = Math.max.apply(null, rsv_ts.map(dd => dd.epiwk));

  rsv_ts.filter(d => d.hhs_abbr === reg && d.epiyr === maxEpiYear && d.epiwk === maxEpiWeek);
}
```

```{ojs}
// Create the plot using Observable Plot
import { Plot } from "@observablehq/plot";

Plot.plot({
  marks: [
    Plot.line(rsv_ts.filter(d => d.hhs_abbr === region.value), { x: "epiwk", y: "scaled_cases", stroke: "epiyr", z: "epiyr" }),
    Plot.dot(filteredData, { x: "epiwk", y: "scaled_cases", fill: "red", r: 5 })
  ],
  width: 800,
  height: 600,
  x: {
    label: "Weeks since July"
  },
  y: {
    label: "RSV positive tests"
  },
  color: {
    scheme: "viridis",
    legend: true,
    label: "Season starting:"
  }
```



