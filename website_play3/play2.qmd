---
title: "Y"
title-block-banner: "#0c233f"
format:
  html:
    embed-resources: true
    page-layout: full
    smooth-scroll: true
    theme: cosmo
    fontcolor: white
css: styles.css
server: shiny
---

```{r setup, include=FALSE}
#| context: setup
#| include: false

library(tidyverse)
library(plotly)
library(shiny)
library(tidyverse)
library(scales)
library(janitor)
library(MMWRweek)
library(arrow)
#library(rnaturalearth)
library(parquetize)
library(viridisLite)
library(tigris)
library(usmap)
library(cowplot)
library(viridis)
library(sf)
library(readxl)
library(ggalluvial)
#library(cdcfluview)
#install.packages("remotes")
#remotes::install_github("hrbrmstr/cdcfluview")
#hhs_regions$state <- state.abb[match(hhs_regions$state_or_territory,state.name)]
#state.hhs.codes <- aggregate(hhs_regions$state, #list(hhs_regions$region), paste, collapse=",")
#state.hhs.codes$x <- gsub('NA,','',state.hhs.codes$x)
#state.hhs.codes$x <- gsub(',NA','',state.hhs.codes$x)
#saveRDS(state.hhs.codes, './hhs_regions.rds')

yale_colors <- c(
  "#00356B",
  "#286DC0",
  "#63AAFF",
  "#C4DDFC",
  "#DDDDDD"
)

yale_gradient <- c("#DDDDDD",
                   "#C4DDFC",
                   "#63AAFF",
                   "#286DC0",
                   "#00356B") # Adjust order for your desired gradient


#datasets for use in the global environment


"%!in%" <- function(x,y)!("%in%"(x,y))

# states <- ne_states(country = "United States of America", returnclass = "sf")
# state_centers <- centers <- st_centroid(states) |> 
#   st_coordinates() |> 
#   as.data.frame() |>
#   cbind(State = states$name)
```

```{r}
#| context: data
#| include: false
#| cache: true
#| cache.extra: !expr file.info("data.csv")$mtime

# Interactive
df1 <- read_csv('./Data/Harmonized Opioid Overdose Datasets_01.23.2025.csv', show_col_types = FALSE) |>
  clean_names() |> 
  dplyr::filter(!(count %in% c(7777, 8888, 9999))) |> 
  dplyr::filter(!(crude_rate %in% c(7777, 8888, 9999))) |> 
  dplyr::filter(!(age_adjusted_rate %in% c(7777, 8888, 9999))) %>%
  mutate(qtr=as.numeric((gsub("Q",'', quarter))), 
         qtr =if_else(is.na(qtr),1,qtr),
         qdate= year+ qtr/4 -1/4
         )

#csv_to_parquet('https://raw.githubusercontent.com/ysph-dsde/data-gov/refs/heads/main/RSV%20Infections%20Data/Raw%20Download/NREVSS%20by%20HHS%20Region_Respiratory%20Syncytial%20Virus%20(RSV)%20Surveillance%20Archive_Downloaded%2001.23.2025.csv',path_to_parquet ='./Data/rsv_testing.parquet')

rsv1_tests <- open_dataset('./Data/rsv_testing.parquet') %>%
  collect() %>%
  as.data.frame()
  
  
key <- readRDS('./Data/hhs_regions.rds')

rsv_ts <- rsv1_tests %>%
    mutate(date= as.Date(substr(mmwrweek_end,1,10 ), '%m/%d/%Y'),
           postdate= as.Date(substr(posted,1,10 ), '%m/%d/%Y')) %>%
  filter(postdate==max(postdate)) %>%
  ungroup() %>%
  filter(level != 'National') %>%
  group_by(level ) %>%
  left_join(key, by=c('level'='Group.1')) %>%
  mutate(scaled_cases = pcr_detections/max(pcr_detections),
         hhs_abbr = x  ) %>%
  ungroup()

dates2_rsv_ts <- MMWRweek(as.Date(rsv_ts$date))

max.wk.yr <- max(dates2_rsv_ts$MMWRweek[dates2_rsv_ts$MMWRyear==max(dates2_rsv_ts$MMWRyear)])

rsv_ts <- cbind.data.frame(rsv_ts,dates2_rsv_ts[,c('MMWRyear', 'MMWRweek')]) %>%
  mutate( epiyr = MMWRyear, 
          epiyr = if_else(MMWRweek<=26,MMWRyear - 1 ,MMWRyear),
          epiwk  = if_else( MMWRweek<=26, MMWRweek+52, MMWRweek  ),
          epiwk=epiwk-26
          )

#Detailed data, did a static download; updated regularly via API rdmq-nq56
##convert from CSV to parquet, which is much more compact!
# csv_to_parquet(path_to_file = './Data/CopyOfNSSP_Emergency_Department_Visit_Trajectories_by_State_and_Sub_State_Regions-_COVID-19__Flu__RSV__Combined___20250130.csv', path_to_parquet ='./Data/NSSP_detailed.parquet') 
dates <- seq.Date(from=as.Date('2022-10-01'), to=as.Date('2025-01-30'),by='week')

#TODO fix county mapping in CT https://stackoverflow.com/questions/78599492/plotting-old-connecticut-county-regions-in-usmap
#for(i in 1:length(dates)){
#}
                
# 
# d1_all <- open_dataset('./Data/NSSP_detailed.parquet') %>%
#   filter(county!='All') %>%collect()


# Waste water Latest: https://www.cdc.gov/wcms/vizdata/NCEZID_DIDRI/RSVStateLevelDownloadCSV.csv

#hospitalizations
#
# csv_to_parquet('https://raw.githubusercontent.com/ysph-dsde/data-gov/refs/heads/main/RSV%20Infections%20Data/Harmonized%20RSV-NET_01.29.2025.csv',path_to_parquet ='./Data/rsvnet_hosp.parquet')

h1 <- open_dataset('./Data/rsvnet_hosp.parquet') %>%
  filter(`Region Type`=='State' & `Diagnostic Test Type`=='All' & Characteristic=='Not Stratified' & Region != 'All Sites') %>%
  rename(state=Region, hosp_rate=`Crude Rate`, date=`Week Observed`) %>%
  dplyr::select(state, date, hosp_rate) %>%
  collect() %>%
  as.data.frame()

h1.age <- open_dataset('./Data/rsvnet_hosp.parquet') %>%
  filter(`Region Type`=='State' & `Diagnostic Test Type`=='All' & Characteristic=='Age'  & Region != 'All Sites') %>%
  rename(state=Region, hosp_rate=`Crude Rate`, date=`Week Observed`) %>%
  dplyr::select(state, date, hosp_rate, Level) %>%
  collect() %>%
  ungroup() %>%
  filter( date >=as.Date('2023-07-01')) %>%
   group_by(state, Level) %>%
  mutate(scale_age=hosp_rate/max(hosp_rate, na.rm=T )) %>%
  as.data.frame()

#Wastewaster by state and date
w1 <- read.csv('./Data/RSVStateLevelDownloadCSV_ww.csv') %>%
  mutate(date=as.Date(Week_Ending_Date, '%m/%d/%Y')) %>%
  filter(Data_Collection_Period=='All Results') %>%
  rename(state=State.Territory, rsv_ww=State.Territory_WVAL) %>%
  arrange(state, date) %>%
  dplyr::select(state, date, rsv_ww)


#ED visits by state overall
d1 <- open_dataset('./Data/NSSP_detailed.parquet') %>%
  filter(county=='All'  ) %>%
  rename(state=geography, date='week_end') %>%
  dplyr::select(state, date, percent_visits_rsv) %>%
  collect() %>%
  as.data.frame()

#combine hospital, wastewater, ED visits
dwh <- d1 %>%
  full_join(w1, by=c('state','date')) %>%
  full_join(h1, by=c('state', 'date'))

dates2 <- MMWRweek(as.Date(dwh$date))

max.wk.yr <- max(dates2$MMWRweek[dates2$MMWRyear==max(dates2$MMWRyear)])

dwh <- cbind.data.frame(dwh,dates2[,c('MMWRyear', 'MMWRweek')]) %>%
  mutate( epiyr = MMWRyear, 
          epiyr = if_else(MMWRweek<=26,MMWRyear - 1 ,MMWRyear),
          epiwk  = if_else( MMWRweek<=26, MMWRweek+52, MMWRweek  ),
          epiwk=epiwk-26
          )



###Pneumococcal disease
#csv_to_parquet('https://data.cdc.gov/resource/qvzb-qs6p.csv',path_to_parquet ='./Data/ipd_cdc1998.parquet')

ipd1 <- readRDS('./Data/pneumococcus/ABCs_st_1998_2021.rds') %>%
 rename(agec = "Age.Group..years.",
         year=Year,
         st=IPD.Serotype,
         N_IPD = Frequency.Count) %>%
  mutate( st= if_else(st=='16','16F', st),
          agec1 = if_else(agec %in% c("Age <2","Age 2-4") ,1,2 ),
          agec=gsub('Age ', '', agec),
          agec2 = if_else( agec %in% c('<2','2-4'), '<5',
                           if_else( agec %in% c('5-17','18-49'), '5-49',
                                    if_else( agec %in% c('50-64','65+'), '50+',NA))),
          agec2 = factor(agec2, levels=c('<5','5-49','50+'), labels=c('<5 years', '5-49 years', '50+ years') )
  ) %>%
  group_by(st,agec2, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>%
  ungroup()

all.sts <- unique(ipd1$st)


# pneumococcal serotype by state
b2019 <- read.csv('./Data/pneumococcus/jiac058_suppl_supplementary_table_s2.csv') %>%
  group_by(State, sero) %>%
  summarize(N_cases=n()) %>%
  mutate(sero=as.factor(sero)) %>%
  ungroup() %>%
    group_by(State, sero) %>%
    mutate(mean_cases=max(N_cases,na.rm=T)
         ) %>%
  group_by(State) %>%
  mutate(         pct = N_cases/sum(N_cases, na.rm=T)*100) %>%
  ungroup() %>%
  tidyr::complete(sero,State , fill=list(pct=0))  #fills 0
  
#pediatric vaccine yptake
#https://data.cdc.gov/Child-Vaccinations/Vaccination-Coverage-among-Young-Children-0-35-Mon/fhky-rtsk/about_data

# csv_to_parquet('./Data/vax/Vaccination_Coverage_among_Young_Children__0-35_Months__20250204.csv',path_to_parquet ='./Data/vax/peds_vax.parquet')
#this breaks out the age data; also has info on income, race, urbanicity, etc
vax_age <- open_dataset('./Data/vax/peds_vax.parquet') %>%
  rename(birth_year = `Birth Year/Birth Cohort`, dim1=`Dimension Type`, age=Dimension,vax_uptake=`Estimate (%)`, samp_size_vax=`Sample Size`) %>%
  collect() %>%
  filter(birth_year==2021 & dim1=='Age') %>%
  dplyr::select(Vaccine,Geography, Dose, dim1, vax_uptake,samp_size_vax, age) %>%
  filter(age=='35 Months' & Geography %in% state.name &
      (Vaccine %in% c('≥1 Dose MMR','≥1 Dose Varicella' ) | 
      (Vaccine=='DTaP' & Dose =='≥4 Doses') | 
      (Vaccine=='Hep A' & Dose =='≥2 Doses') | 
      (Vaccine=='Hep B' & Dose =='≥3 Doses') | 
      (Vaccine=='Hib' & Dose =='Full Series') | 
      (Vaccine=='PCV' & Dose =='≥4 Doses') 
                                       ) )


vax_urban <- open_dataset('./Data/vax/peds_vax.parquet') %>%
  rename(birth_year = `Birth Year/Birth Cohort`, dim1=`Dimension Type`, urban=Dimension,vax_uptake=`Estimate (%)`, samp_size_vax=`Sample Size`) %>%
  collect() %>%
  filter(birth_year=='2016-2019' & dim1=='Urbanicity') %>%
  dplyr::select(Vaccine,Geography, Dose, dim1, vax_uptake,samp_size_vax, urban) %>%
  filter( Geography %in% state.name &
      (Vaccine %in% c('≥1 Dose MMR','≥1 Dose Varicella' ) | 
      (Vaccine=='DTaP' & Dose =='≥4 Doses') | 
      (Vaccine=='Hep A' & Dose =='≥2 Doses') | 
      (Vaccine=='Hep B' & Dose =='≥3 Doses') | 
      (Vaccine=='Hib' & Dose =='Full Series') | 
      (Vaccine=='PCV' & Dose =='≥4 Doses') 
                                       ) ) %>%
  mutate(urban= factor(urban, levels= c("Living In a Non-MSA", "Living In a MSA Non-Principal City","Living In a MSA Principal City"), ))



```



```{r opiods}
#| context: data
#| include: false
#| cache: true
#| cache.extra: !expr file.info("data.csv")$mtime

opioid_path <- "./Data/Harmonized Opioid Overdose Datasets_01.23.2025.csv"

df_opioid <- read_csv(opioid_path) |>
  clean_names() |> 
  filter(!(count %in% c(7777, 8888, 9999))) |> 
  filter(!(crude_rate %in% c(7777, 8888, 9999))) |> 
  filter(!(age_adjusted_rate %in% c(7777, 8888, 9999))) |> 
  # Filter out rows without Quarter
  filter(!is.na(quarter)) |> 
  # Create year_quarter column
  mutate(year_quarter = paste(year, quarter))

# Static
opioid_od <- read_csv(opioid_path) %>%
  as.data.frame()
```



# Public Health Data Explorer (PHDE)

Welcome to the Public Health Data Explorer, hosted by the Yale School of Public Health. Here you can find visualizations of diverse datasets related to public health outcomes of general interest.

```{r}
#| context: server

output$distPlot1 <- renderPlotly({
  
 p1 <- df1 %>%
    dplyr::filter(drug=='All Opioids' & characteristic=='Age' & dataset=='AHRQ' & state == input$state.select ) %>%
    group_by(qdate, level) %>%
    summarize(count=sum(count)) %>% #combine outpatient nad inpatient
  ggplot(aes(x=qdate, y=count, group=level, color=level)) +
    theme_minimal() +
    geom_line()
ggplotly(p1)
})

output$distPlot2 <- renderPlotly({
  
 p1 <- df1 %>%
    dplyr::filter(drug=='All Opioids' & characteristic=='Age' & dataset=='NCHS' & state == input$state.select ) %>%
    group_by(qdate, level) %>%
    summarize(count=sum(count)) %>% #combine outpatient nad inpatient
  ggplot(aes(x=qdate, y=count, group=level, color=level)) +
    theme_minimal() +
    geom_line()
ggplotly(p1)
})

########################################
##RSV
########################################
output$distPlotRSV3 <- renderPlotly({
  
point_plot <- rsv_ts %>% filter(hhs_abbr==input$hhs.region.select &  epiyr == max(epiyr, na.rm=T) ) %>%
  filter(epiwk==max(epiwk))

rsv_ts1 <- rsv_ts %>%
  filter(x==input$hhs.region.select) %>%
  ggplot(aes(x=epiwk, y=scaled_cases, group=as.factor(epiyr), color=as.factor(epiyr)))+
  geom_line()+
  theme_minimal()+
  xlab('Weeks since July')+
  ylab('RSV positive tests')+
  scale_colour_viridis_d() +
geom_point(data=point_plot,aes(x=epiwk, y=scaled_cases) ,col='red') +
  guides(color=guide_legend(title="Season starting:"))
  

ggplotly(rsv_ts1)
})


############################
#https://www.cdc.gov/wcms/vizdata/NCEZID_DIDRI/RSVStateLevelDownloadCSV.csv

output$distPlotRSV_dwh <- renderPlotly({
  
 # point_plot <- dwh %>% 
 #   dplyr::select(state,date, percent_visits_rsv,rsv_ww,hosp_rate) %>%
 #  filter(state==input$state.select2 ) %>%
 #  reshape2::melt(id.vars=c('state','date')) %>%
 #   group_by(variable) %>%
 #   filter(date==max(date))

rsv_ts_comp <- dwh %>%
  filter(state==input$state.select2 & date >=as.Date('2023-07-01')) %>%
  ggplot()+
  geom_line(aes(x=date, y=percent_visits_rsv/max(percent_visits_rsv, na.rm=T), color='ED')) +
   geom_line(aes(x=date, y=rsv_ww/max(rsv_ww, na.rm=T), color='WasteW')) +
   geom_line(aes(x=date, y=hosp_rate/max(hosp_rate, na.rm=T),color='Hosp'), lty=2) +  
  theme_minimal()+
  xlab('Date')+
  ylab('RSV activity')+
    scale_color_manual(name = "RSV", values = c("ED" = "#e41a1c", "WasteW"="#377eb8", 'Hosp'='#4daf4a'  ))+
  ggtitle(input$state.select2)

  scale_colour_viridis_d() 


ggplotly(rsv_ts_comp)
})


#hospitalization by age
output$distPlotRSV_hosp_age <- renderPlotly({
  
rsv_ts_comp <- h1.age %>%
  filter(state==input$state.select3 & date >=as.Date('2023-07-01')) %>%
 
  ggplot()+
  geom_line(aes(x=date, y=scale_age, group_by=Level, color=Level)) +
  theme_minimal()+
  xlab('Date')+
  ylab('RSV activity')+
  scale_colour_viridis_d() +
  ggtitle(input$state.select3)

ggplotly(rsv_ts_comp)
})


#Pneumococcal disease
 output$stPlot <- renderPlotly({
      p1 <- ipd1  %>%
        filter(st %in% c(input$select.st)) %>%
        ggplot(aes(x=year, y=N_IPD))+
        geom_line()+
        facet_wrap(~agec2, scales ='free', nrow=1) +
        theme_classic()+
        theme(axis.text.x = element_text(angle = 45, vjust = 1.0, hjust=1)) +
        geom_vline(xintercept=c(1999.5, 2009.5), lty=2, color='gray')+
        ylim(0,NA) +
        ggtitle(paste0('Trends in IPD caused by serotype ', input$select.st, ' in the US'))
      ggplotly(p1)
    })

 
 #serotype geography
  output$stGeographyPlot <- renderPlotly({

    b2019 %>%
    filter(sero==input$select.st2 ) %>%
    ggplot( aes(fill=State, y=pct, x=sero)) +
    geom_bar(position="dodge", stat="identity")+
        scale_fill_viridis_d()+
    theme_minimal()+
      ylab('Proportion of IPD cases in the state') +
      ggtitle(input$select.st2)
  })

#vaccine urbanicity
output$vax_urban_plot <- renderPlotly({

   plot_ds <- vax_urban %>% filter(Vaccine==input$select.vax2)
        fig <- plot_ly(
          data = plot_ds, 
          x = ~urban, 
          y = ~Geography, 
          z = ~vax_uptake, 
          type = "heatmap",
          colorscale = "Viridis",
          reversescale = TRUE,  # Reverse the color scale
          zmin = min(plot_ds$vax_uptake, na.rm = TRUE), 
          zmax = max(plot_ds$vax_uptake, na.rm = TRUE),
          showscale = TRUE
        ) %>%
          colorbar(title = "Uptake") %>%
          layout(
            title = "Vaccine Uptake 35 Months",
            xaxis = list(title = "Vaccine", tickangle = -45),
            yaxis = list(title = "State")
          )
        
        # Set NA values to gray
        fig <- fig %>% layout(plot_bgcolor = "gray")
        
        
        fig  # Display the plot
    })


## Opioid
 df_time_series_interactive <- reactive({
    df_opioid %>%
      filter(drug=='All Opioids' & 
               characteristic=='Age' &
               state == input$state) |> 
      group_by(dataset, state, year_quarter, level) %>%
      summarize(count=sum(count, na.rm = TRUE)) |>
      ungroup() |> 
      pivot_wider(names_from = level, values_from = count) |> 
      mutate(Overall = `25-44 Years` + `45-64 Years` + `65+ Years` + `<24 Years`) |> 
      pivot_longer(
        cols = where(is.numeric),
        names_to = "level",
        values_to = "count"
      ) |> 
      mutate(level = factor(level),
             level = fct_relevel(level, c("Overall", "65+ Years",
                                          "45-64 Years", "25-44 Years",
                                          "<24 Years"))) |> 
      filter(count > 0) 
  })
  
  output$opioid_time_series_interactive_1 <- renderPlotly({ 
    # User must provide inputs
    req(input$state)
    # Dataset must have rows
    req(nrow(df_time_series_interactive()) > 0)
    
    p1 <- df_time_series_interactive() %>%
      ggplot(aes(x = year_quarter, y = count, 
                 group = level, color = level,
                 text = paste0("Quarter: ", year_quarter, "\n",
                               "Count: ", scales::comma(count)))) +
      geom_line() +
      labs(x = NULL,
           y = "Count",
           color = "Age Category") +
      scale_x_discrete(breaks = c("2016 Q1", "2017 Q1", "2018 Q1",
                                  "2019 Q1", "2020 Q1", "2021 Q1", 
                                  "2022 Q1")) +
      scale_y_continuous(labels = scales::comma) +
      scale_color_manual(values = yale_colors) + # Apply Yale branding colors
      facet_wrap(~dataset) +
      theme_minimal(base_size = 15) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
    
    ggplotly(p1, tooltip = c("text"))
  }) 
  
  
  
  output$opioid_time_series_interactive_2 <- renderPlotly({
    
    p <- df_opioid %>%
      filter(drug=='All Opioids' & 
               characteristic=='Sex' &
               state == "US") %>%
      group_by(dataset, state, year_quarter, level) %>%
      summarize(count=sum(count, na.rm = TRUE)) %>%
      ungroup() %>%
      filter(count > 0) %>%
      ggplot(aes(x = year_quarter, y = count, 
                 group = level, color = level,
                 text = paste0("Quarter: ", year_quarter, "\n",
                               "Count: ", scales::comma(count)))) +
      geom_line() +
      labs(x = NULL,
           y = "Count",
           color = NULL,
           title = "National Opioid Overdose Count") +
      scale_x_discrete(breaks = c("2016 Q1", "2017 Q1", "2018 Q1",
                                  "2019 Q1", "2020 Q1", "2021 Q1", 
                                  "2022 Q1")) +
      scale_y_continuous(labels = scales::comma) +
      scale_color_manual(values = yale_colors) + # Apply Yale branding colors
      facet_wrap(~dataset) +
      theme_minimal(base_size = 13) +
      theme(axis.text.x = element_text(angle = 45,  hjust = 1))
    
    ggplotly(p, tooltip = "text")
  })
  
  output$opioid_bar_graph_2020 <- renderPlotly({
    
    p <- opioid_od %>%
      # Filter the placeholder numerical values.
      filter(`Age Adjusted Rate` %!in% 7777 & `Age Adjusted Rate` %!in% 8888 & `Age Adjusted Rate` %!in% 9999) %>%
      
      # Change the date named in the plot title.
      filter(Year %in% 2020) %>%
      
      # Filter the metadata settings.
      filter(State %in% "US", Quarter %in% NA, Setting %in% "All",
             `Underlying Cause of Death` %in% "Unintentional",
             Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
      mutate(Drug = if_else(Drug == "Mental and behavioural disorders due to use of opioids, acute intoxication",
                            "Mental and behavioural disorders",
                            Drug)) %>%
      
      # Plot settings and features.
      ggplot(data = ., aes(x = Drug, y = `Age Adjusted Rate`,
                           text = paste0("Drug: ", Drug, "<br>",
                                         "Age Adjusted Rate: ", `Age Adjusted Rate`))) +
      geom_bar(stat = "identity", position = "dodge", aes(fill = Dataset, color = Dataset)) +
      labs(title = "National Opioid Overdose Rate\nby Types of Opioid and Polysubstance in 2020",
           subtitle = "Underlying Cause of Death: Unintentional Setting: All.",
           x = "", y = "Age-Adjusted Rate (per 100,000)") +
      scale_color_manual(values = yale_colors) + # Apply Yale branding colors
      scale_fill_manual(values = yale_colors) + # Apply Yale branding colors
      theme_minimal(base_size = 13) + 
      theme(axis.text.x = element_text(angle = 90,  hjust = 1))
    
    ggplotly(p, tooltip = "text")
  })
  
  output$opioid_bar_graph_2021 <- renderPlotly({
    
    
    p <- opioid_od %>%
      # Filter the placeholder numerical values.
      filter(`Age Adjusted Rate` %!in% 7777 & `Age Adjusted Rate` %!in% 8888 & `Age Adjusted Rate` %!in% 9999) %>%
      
      # Change the date named in the plot title.
      filter(Year %in% 2021) %>%
      
      # Filter the metadata settings.
      filter(State %in% "US", Quarter %in% NA, Setting %in% "All",
             `Underlying Cause of Death` %in% "Unintentional",
             Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
      mutate(Drug = if_else(Drug == "Mental and behavioural disorders due to use of opioids, acute intoxication",
                            "Mental and behavioural disorders",
                            Drug)) %>%
      
      # Plot settings and features.
      ggplot(data = ., aes(x = Drug, y = `Age Adjusted Rate`,
                           text = paste0("Drug: ", Drug, "<br>",
                                         "Age Adjusted Rate: ", `Age Adjusted Rate`))) +
      geom_bar(stat = "identity", position = "dodge", aes(fill = Dataset, color = Dataset)) +
      labs(title = "National Opioid Overdose Rate by\nTypes of Opioid and Polysubstance in 2021",
           subtitle = "Underlying Cause of Death: Unintentional Setting: All.",
           x = "", y = "Age-Adjusted Rate\n(per 100,000)") +
      scale_color_manual(values = yale_colors) + # Apply Yale branding colors
      scale_fill_manual(values = yale_colors) + # Apply Yale branding colors
      theme_minimal(base_size = 13) +
      theme(axis.text.x = element_text(angle = 90,  hjust = 1))
    
    ggplotly(p, tooltip = "text")
  })
  
  output$opioid_bar_graph_2022 <- renderPlotly({
    
    
    p <- opioid_od %>%
      # Filter the placeholder numerical values.
      filter(`Age Adjusted Rate` %!in% 7777 & `Age Adjusted Rate` %!in% 8888 & `Age Adjusted Rate` %!in% 9999) %>%
      
      # Change the date named in the plot title.
      filter(Year %in% 2022) %>%
      
      # Filter the metadata settings.
      filter(State %in% "US", Quarter %in% NA, Setting %in% "All",
             `Underlying Cause of Death` %in% "Unintentional",
             Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
      mutate(Drug = if_else(Drug == "Mental and behavioural disorders due to use of opioids, acute intoxication",
                            "Mental and behavioural disorders",
                            Drug)) %>%
      
      # Plot settings and features.
      ggplot(data = ., aes(x = Drug, y = `Age Adjusted Rate`,
                           text = paste0("Drug: ", Drug, "<br>",
                                         "Age Adjusted Rate: ", `Age Adjusted Rate`))) +
      geom_bar(stat = "identity", position = "dodge", aes(fill = Dataset, color = Dataset)) +
      labs(title = "National Opioid Overdose Rate\nby Types of Opioid and Polysubstance in 2022",
           subtitle = "Underlying Cause of Death: Unintentional Setting: All.",
           x = "", y = "Age-Adjusted Rate\n(per 100,000)") +
      scale_color_manual(values = yale_colors) + # Apply Yale branding colors
      scale_fill_manual(values = yale_colors) + # Apply Yale branding colors
      theme_minimal(base_size = 13) + 
      theme(axis.text.x = element_text(angle = 90,  hjust = 1))
    
    ggplotly(p, tooltip = "text")
    
  })
  
  
  
  output$ahrq_map <- renderPlotly({
    
    
    # -----------------------------
    # US Map plot.
    
    # Code to find mathes between AHRQ and CDC WONDER
    #opioid_od[opioid_od$Dataset %in% "AHRQ", "Setting"] %>% unique()
    
    # Generate a side-by-side set of plots showing "Drug = All Opioids" counts
    # by state in 2022. Toggle the setting to show either inpatient or ER.
    
    
    # Counts in AHRQ dataset.
    ahrq_map_plot <- opioid_od %>%
      # Filter the placeholder numerical values.
      filter(Count %!in% 7777 & Count %!in% 8888 & Count %!in% 9999) %>%
      
      # Switch between the two settings, and change the subtitle name.
      filter(Setting %in% "Medical Facility - Inpatient") %>%
      #filter(Setting %in% "Medical Facility - Outpatient or ER") %>%
      
      # Filter the metadata settings.
      filter(Dataset %in% "AHRQ", State %in% datasets::state.name, 
             Year %in% 2022, Quarter %in% NA,
             `Underlying Cause of Death` %in% "All", Drug %in% "All Opioids",
             Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
      
      # plot_usmap() requires specific nomenclature for the column with states.
      rename(state = State) %>%
      
      # Plot settings and features.
      plot_usmap(data = ., values = "Count", color = "#00356B",) + 
      scale_fill_gradientn(
        colors = yale_gradient,   # Use Yale branding colors in gradient
        name = "Count (2022)", 
        labels = scales::comma    # Format labels with commas
      ) + 
      labs(title = "AHRQ") +
      theme(legend.position = "",
            plot.title = element_text(size = 14),  # Increase title size
            axis.ticks = element_blank(),
            axis.text = element_blank(),
            legend.text = element_text(size = 12),               # Adjust legend text
            legend.title = element_text(size = 14))
    
    # Add a custom tooltip with comma formatting
    ahrq_map_plot <- ahrq_map_plot +
      aes(text = paste0("State: ", state, "<br>",
                        "Count: ", scales::comma(Count)))
    
    # Convert to plotly
    ggplotly(ahrq_map_plot, tooltip = "text")
  })
  
  
  output$wonder_map <- renderPlotly({
    # Counts in CDC WONDER dataset.
    wonder_map_plot <- opioid_od %>%
      # Filter the placeholder numerical values.
      filter(Count %!in% 7777 & Count %!in% 8888 & Count %!in% 9999) %>%
      
      # Switch between the two settings, and change the subtitle name.
      filter(Setting %in% "Medical Facility - Inpatient") %>%
      #filter(Setting %in% "Medical Facility - Outpatient or ER") %>%
      
      # Filter the metadata settings.
      filter(Dataset %in% "CDC WONDER", State %in% datasets::state.name, 
             Year %in% 2022, Quarter %in% NA,
             `Underlying Cause of Death` %in% "All", Drug %in% "All Opioids",
             Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
      
      # plot_usmap() requires specific nomenclature for the column with states.
      rename(state = State) %>%
      
      # Plot settings and features.
      plot_usmap(data = ., values = "Count", color = "#00356B",) + 
      scale_fill_gradientn(
        colors = yale_gradient,   # Use Yale branding colors in gradient
        name = "Count (2022)", 
        labels = scales::comma    # Format labels with commas
      ) + 
      labs(title = "\ \ \ \ \ \ CDC WONDER") +
      theme(legend.position = "right",
            plot.title = element_text(size = 14),  # Increase title size
            axis.ticks = element_blank(),
            axis.text = element_blank(),
            legend.text = element_text(size = 14),               # Adjust legend text
            legend.title = element_text(size = 16))
    
    # Add a custom tooltip with comma formatting
    wonder_map_plot <- wonder_map_plot +
      aes(text = paste0("State: ", state, "<br>",
                        "Count: ", scales::comma(Count)))
    
    ggplotly(wonder_map_plot, tooltip = "text")
    
  })
  
```

## Respiratory syncytial virus (RSV) in the United States

::: panel-tabset
### Compare Data

```{r}
#| panel: sidebar

selectInput("state.select2", "State:", 
            choices=state.name, selected='New York')
```

```{r}
#| panel: fill

plotlyOutput("distPlotRSV_dwh")

```

### Trends in positive tests

```{r}
#| panel: sidebar

selectInput("hhs.region.select", "HHS Region:", 
            choices=unique(rsv_ts$hhs_abbr), selected='CT,ME,MA,NH,RI,VT')
```

```{r}
#| panel: fill
plotlyOutput("distPlotRSV3")

```

### Age patterns in hospitalization

```{r}
#| panel: sidebar

selectInput("state.select3", "State:", 
            choices=unique(h1.age$state), selected='New York')
```

```{r}
#| panel: fill

plotlyOutput("distPlotRSV_hosp_age")

```

### Current national map (ED)

```{r}
#| panel: fill

i=length(dates)-1
d1 <- open_dataset('./Data/NSSP_detailed.parquet') %>%
  filter(county!='All' & week_end==dates[i] ) %>%
  mutate(
         percent_visits_rsv=if_else(percent_visits_rsv>1,1,percent_visits_rsv) ,
         
         
         percent_visits_combined=if_else(percent_visits_combined>10,10,percent_visits_combined) ) %>%
  collect()

p1 <- usmap::plot_usmap(regions='counties', data=d1,values='percent_visits_rsv' )   +
   labs(title = paste0('RSV ED visits ', dates[i])) + 
    theme(panel.background = element_rect(color = "white", fill = "white")) +
    scale_fill_stepsn('RSV', breaks= seq(0,1, by=0.1), limits = c(0,1),
                      colors=viridis_pal()(10),
                      guide = guide_colorsteps(even.steps = FALSE))

print(p1)
```

### Regional trends (NREVSS)

```{r}
heat1 <- rsv1_tests %>%
  mutate(date= as.Date(substr(mmwrweek_end,1,10 ), '%m/%d/%Y'),
          postdate= as.Date(substr(posted,1,10 ), '%m/%d/%Y')) %>%
  filter(postdate==max(postdate)) %>% 
  ungroup() %>%
  filter(level != 'National') %>%
  group_by(level ) %>%
  left_join(key, by=c('level'='Group.1')) %>%
  mutate(scaled_cases = pcr_detections/max(pcr_detections),
         hhs_abbr=x)

# by each district
p2 <- ggplot(heat1, aes(date, x, fill = scaled_cases))+
  geom_tile()+ 
  scale_fill_distiller(name = "PCR Positives", 
                       palette = "Blues", 
                       direction = 1,
                       breaks = pretty_breaks())+
  theme(axis.text.y = element_text(size = 3))+
  labs(x = "Date", y = "HHS Region", title ="RSV detections NREVSS")+
   guides(fill="none")+
  theme_minimal()
p2
```

### Trends in Google searches

```{r}
#| panel: fill

print('TODO')
```
:::

------------------------------------------------------------------------

## Pneumococcal disease in the United States

::: panel-tabset
### Trends in serotype frequency

This shows trends in Invasive Pneumococcal Disease caused by different serotypes, as reported to the ABCs system at CDC

```{r}
#| panel: sidebar
selectInput("select.st",
                        "Select serotype:",
                        all.sts,
                        selected='19F')
```

```{r}
#| panel: fill
plotlyOutput("stPlot")

```

### Change in Invasive pneumococcal Disease 1998-2022
This shows the decreases in serotypes targeted by PCV13 (left) and increases in the occurrence of non-vaccine serotypes (right) since 1998/1999
```{r}
#| include: false

pcv7 <- c('4','6B','9V','14','18C','19F','23F')

pcv10gsk <- c(pcv7,'1','5','7F')

pcv13 <- c(pcv7, '1','3','5','6A','7F','19A')

s1 <- readRDS('./Data/pneumococcus/ABCs_st_1998_2021.rds') %>%
  rename(agec = "Age.Group..years.",
         year=Year,
         st=IPD.Serotype,
         N_IPD = Frequency.Count) %>%
  mutate( st= if_else(st=='16','16F', st)) %>%
  group_by(st, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>%
  ungroup() %>%
  group_by(st) %>%
  mutate(cum_N= sum(N_IPD)) %>%
  filter(cum_N>100) %>%
  ungroup() %>%
  mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT'))
s2_pre<- s1 %>%
  filter(year %in% c(1998, 1999)) %>%
  group_by(st, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>%
  ungroup() %>%
    group_by(st) %>%
  summarize(N_IPD_pre=mean(N_IPD)) %>%
  ungroup() %>%
    tidyr::complete(st,  fill=list(N_IPD_pre=0))  #fills 0

s2_pre13<- s1 %>%
  filter(year %in% c(2008, 2009)) %>%
  group_by(st, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>%
  ungroup() %>%
    group_by(st) %>%
  summarize(N_IPD_pre=mean(N_IPD)) %>%
  ungroup() %>%
    tidyr::complete(st,  fill=list(N_IPD_pre=0))  #fills 0

s2<- s1 %>%
    group_by(st, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>% #sum across age group
  ungroup() %>%
    tidyr::complete(st, year, fill=list(N_IPD=0))%>%  #fills 0
  left_join(s2_pre, by='st') %>%
  mutate(N_IPD_pre = if_else(is.na(N_IPD_pre),0, N_IPD_pre) ,
    logRR = log((N_IPD+1)/(N_IPD_pre+1) )) 

max_RR <- s2 %>%
  group_by(st) %>%
  summarize(max_RR = max(logRR)) %>%
  arrange((max_RR))

s2$st <- factor(s2$st, levels = max_RR$st)

df_wide <- s2 %>%
  dplyr::select(year, st, logRR) %>%
  tidyr::pivot_wider(names_from = year, values_from = logRR)


df_vt <- df_wide %>%
  mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT')) %>%
  filter(pcv13st =='VT') %>%
    dplyr::select(-pcv13st) 

df_nvt <- df_wide %>%
  mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT')) %>%
  filter(pcv13st =='NVT') %>%
    dplyr::select(-pcv13st) 

 rr_nvt <- s2 %>%
     mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT')) %>%
     filter(pcv13st =='NVT') %>%
 ggplot( aes(x = factor(year), y = st, fill = logRR)) +
  geom_tile() +
     scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
  labs(x = "Year", y =
         "serotype", fill = "log RR") +
  theme_minimal()+
       theme(axis.text.x=element_text(angle=45, hjust=1))

   rr_vt <- s2 %>%
     mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT')) %>%
     filter(pcv13st =='VT') %>%
 ggplot( aes(x = factor(year), y = st, fill = logRR)) +
  geom_tile() +
#     guides(fill="none")+

  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
  labs(x = "Year", y =
         "serotype", fill = "log RR") +
  theme_minimal()+
    theme(axis.text.x=element_text(angle=45, hjust=1))
```

```{r}
#| panel: fill
subplot(ggplotly(rr_vt), ggplotly(rr_nvt),  margin = 0.04)
```


### Geographic variation in serotype frequency
Data from 2019 IPD (Beall et al, JID 2022 10.1093/infdis/jiac058)

```{r}
#| panel: sidebar
selectInput("select.st2",
                        "Select serotype:",
                        unique(b2019$sero),
                        selected='19F')
```

```{r}
#| panel: fill
plotlyOutput("stGeographyPlot")

```

### Comparison of invasive pneumococcal disease and pneumonia

This shows the concordance between the serotypes causing invasive pneumococcla disease across the US reported to CDC/AVCs and the serotypes causing pneumococcal pneumonia in Louisville, KY as reported in [Ramirez et al OFID 2025](https://academic.oup.com/ofid/article/12/1/ofae727/7926903)

```{r}
ipd1 <- readRDS('./Data/pneumococcus/ABCs_st_1998_2021.rds') %>%
  rename(agec = "Age.Group..years.",
         year=Year,
         st=IPD.Serotype,
         N_IPD = Frequency.Count) %>%
  mutate( st= if_else(st=='16','16F', st),
          st = if_else(st %in% c('15B','15C'), '15BC',st),
          if_else(st %in% c('6A','6C'), '6AC',st)
                       ) %>%
  filter(year %in% c(2019,2020) & agec %in% c('Age 50-64','Age 65+')) %>%
  group_by(st) %>%
  summarize( N_IPD= sum(N_IPD))

uad <- readxl::read_excel('./Data/pneumococcus/SSUAD/ramirez_ofid_2025_ofae727.xlsx') %>%
  mutate(N_SSUAD= over65 + a50_64_with_indication + a50_64_no_indication ) %>%
  full_join(ipd1, by='st') %>%
  filter(!is.na(N_SSUAD) & !is.na(N_IPD))

ggplot(uad, aes(x=N_IPD, y=N_SSUAD, label=st)) +
  geom_point()+
  geom_text( vjust = 1)+
  theme_classic() +
  ggtitle('IPD vs pneumonia 50+ years in US')
```

:::
------------------------------------------------------------------------

## Vaccination

::: panel-tabset

### Uptake by state

```{r}
fig <- plot_ly(
  data = vax_age, 
  x = ~Vaccine, 
  y = ~Geography, 
  z = ~vax_uptake, 
  type = "heatmap",
  colorscale = "Viridis",
  reversescale = TRUE  # Reverse the color scale like `direction=-1` in ggplot
) 

fig <- fig %>%
  layout(
    title = "Vaccine Uptake 35 Months",
    xaxis = list(title = "Vaccine", tickangle = -45),  # Rotate x-axis labels
    yaxis = list(title = "State")
  )

fig  # Display the plot
```


### Uptake by urbanicity

```{r}
#| panel: sidebar

selectInput("select.vax2", "Vaccine:", 
            choices=unique(vax_urban$Vaccine), selected='PCV')
```

Uptake in non-urban, smaller urban, larger urban locations
```{r}
#| panel: fill
#| layout-ncol: 1
#| height: 1200px

plotlyOutput("vax_urban_plot")

```


::: 
------------------------------------------------------------------------

## Opioids in the United States

::: panel-tabset
### Trends in national healthcare incidents

```{r}
#| panel: fill
plotlyOutput("opioid_time_series_interactive_2")

```

### Map of opioid overdoses

AHRQ hospitalizations
```{r}
#| panel: fill
plotlyOutput("ahrq_map")

```

CDC WONDER
```{r}
#| panel: fill
plotlyOutput("wonder_map")

```

### Type of opioid

```{r}
#| panel: fill
plotlyOutput("opioid_bar_graph_2020")

```

```{r}
#| panel: fill
plotlyOutput("opioid_bar_graph_2022")
```

:::

------------------------------------------------------------------------

## Documentation

### Notes on data sources

------------------------------------------------------------------------ todo todo
