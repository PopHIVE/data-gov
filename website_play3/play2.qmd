---
title: "A"
title-block-banner: "#0c233f"
format:
  html:
    embed-resources: true
    smooth-scroll: true
    theme: cosmo
    fontcolor: black
    toc: false
    toc-location: left
    toc-title: Summary
    toc-depth: 3
css: styles.css
server: shiny
---

```{r setup, include=FALSE}
library(tidyverse)
library(plotly)
library(shiny)
library(tidyverse)
library(scales)
library(janitor)
library(MMWRweek)
library(arrow)
library(parquetize)
library(sf)
library(tigris)
library(viridis)
#library(cdcfluview)
#install.packages("remotes")
#remotes::install_github("hrbrmstr/cdcfluview")
#hhs_regions$state <- state.abb[match(hhs_regions$state_or_territory,state.name)]
#state.hhs.codes <- aggregate(hhs_regions$state, #list(hhs_regions$region), paste, collapse=",")
#state.hhs.codes$x <- gsub('NA,','',state.hhs.codes$x)
#state.hhs.codes$x <- gsub(',NA','',state.hhs.codes$x)
#saveRDS(state.hhs.codes, './website_play3/hhs_regions.rds')
```

```{r, echo=F}
#datasets for use in the global environment

"%!in%" <- function(x,y)!("%in%"(x,y))

# Interactive
df1 <- read_csv('./Data/Harmonized Opioid Overdose Datasets_01.23.2025.csv', show_col_types = FALSE) |>
  clean_names() |> 
  dplyr::filter(!(count %in% c(7777, 8888, 9999))) |> 
  dplyr::filter(!(crude_rate %in% c(7777, 8888, 9999))) |> 
  dplyr::filter(!(age_adjusted_rate %in% c(7777, 8888, 9999))) %>%
  mutate(qtr=as.numeric((gsub("Q",'', quarter))), 
         qtr =if_else(is.na(qtr),1,qtr),
         qdate= year+ qtr/4 -1/4
         )

rsv1_tests <- read.csv('https://raw.githubusercontent.com/ysph-dsde/data-gov/refs/heads/main/RSV%20Infections%20Data/Raw%20Download/NREVSS%20by%20HHS%20Region_Respiratory%20Syncytial%20Virus%20(RSV)%20Surveillance%20Archive_Downloaded%2001.23.2025.csv')

key <- readRDS('./Data/hhs_regions.rds')

rsv_ts <- rsv1_tests %>%
    mutate(date= as.Date(substr(mmwrweek_end,1,10 ), '%m/%d/%Y'),
           postdate= as.Date(substr(posted,1,10 ), '%m/%d/%Y')) %>%
  filter(postdate==max(postdate)) %>%
  ungroup() %>%
  filter(level != 'National') %>%
  group_by(level ) %>%
  left_join(key, by=c('level'='Group.1')) %>%
  mutate(scaled_cases = pcr_detections/max(pcr_detections),
         hhs_abbr = x
         )
saveRDS(rsv_ts, './Data/rsv_latest.rds') #saves latest vintage of the r


#Detailed data, did a static download; updated regularly via API rdmq-nq56
##convert from CSV to parquet, which is much more compact!
# csv_to_parquet(path_to_file = './website_play3/Data/CopyOfNSSP_Emergency_Department_Visit_Trajectories_by_State_and_Sub_State_Regions-_COVID-19__Flu__RSV__Combined___20250130.csv', path_to_parquet ='./website_play3/Data/NSSP_detailed.parquet') 
dates <- seq.Date(from=as.Date('2022-10-01'), to=as.Date('2025-01-30'),by='week')

#TODO fix county mapping in CT https://stackoverflow.com/questions/78599492/plotting-old-connecticut-county-regions-in-usmap

for(i in 100:length(dates)){
d1 <- open_dataset('./website_play3/Data/NSSP_detailed.parquet') %>%
  filter(county!='All' & week_end==dates[i] & ed_trends_rsv!='Data Unavailable') %>%
  mutate(percent_visits_rsv=if_else(is.na(percent_visits_rsv),0,percent_visits_rsv),
         percent_visits_rsv=if_else(percent_visits_rsv>1,1,percent_visits_rsv) ) %>%
  collect()

p1 <- usmap::plot_usmap(regions='counties', data=d1,values='percent_visits_rsv' )   +
   labs(title = paste0('RSV ED visits ', dates[i])) + 
    theme(panel.background = element_rect(color = "white", fill = "white")) +
    scale_fill_stepsn('RSV', breaks= seq(0,1, by=0.1), limits = c(0,1),
                      colors=viridis_pal()(10),
                      guide = guide_colorsteps(even.steps = FALSE))
print(p1)
}
                



```

# Public Health Data Explorer (PHDE)

Welcome to the Public Health Data Explorer, hosted by the Yale School of Public Health. Here you can find visualizations of diverse datasets related to public health outcomes of general interest.


```{r}
#| context: server

df1 <- read_csv('./Data/Harmonized Opioid Overdose Datasets_01.23.2025.csv', show_col_types = FALSE) |>
  clean_names() |> 
  dplyr::filter(!(count %in% c(7777, 8888, 9999))) |> 
  dplyr::filter(!(crude_rate %in% c(7777, 8888, 9999))) |> 
  dplyr::filter(!(age_adjusted_rate %in% c(7777, 8888, 9999))) %>%
  mutate(qtr=as.numeric((gsub("Q",'', quarter))), 
         qtr =if_else(is.na(qtr),1,qtr),
         qdate= year+ qtr/4 -1/4
         )

output$distPlot1 <- renderPlotly({
  
 p1 <- df1 %>%
    dplyr::filter(drug=='All Opioids' & characteristic=='Age' & dataset=='AHRQ' & state == input$state.select ) %>%
    group_by(qdate, level) %>%
    summarize(count=sum(count)) %>% #combine outpatient nad inpatient
  ggplot(aes(x=qdate, y=count, group=level, color=level)) +
    theme_minimal() +
    geom_line()
ggplotly(p1)
})

output$distPlot2 <- renderPlotly({
  
 p1 <- df1 %>%
    dplyr::filter(drug=='All Opioids' & characteristic=='Age' & dataset=='NCHS' & state == input$state.select ) %>%
    group_by(qdate, level) %>%
    summarize(count=sum(count)) %>% #combine outpatient nad inpatient
  ggplot(aes(x=qdate, y=count, group=level, color=level)) +
    theme_minimal() +
    geom_line()
ggplotly(p1)
})

########################################
##RSV
########################################
key <- readRDS('./Data/hhs_regions.rds')

rsv_ts <- readRDS('./Data/rsv_latest.rds')

dates2 <- MMWRweek(as.Date(rsv_ts$date))

max.wk.yr <- max(dates2$MMWRweek[dates2$MMWRyear==max(dates2$MMWRyear)])

rsv_ts <- cbind.data.frame(rsv_ts,dates2[,c('MMWRyear', 'MMWRweek')]) %>%
  mutate( epiyr = MMWRyear, 
          epiyr = if_else(MMWRweek<=26,MMWRyear - 1 ,MMWRyear),
          epiwk  = if_else( MMWRweek<=26, MMWRweek+52, MMWRweek  ),
          epiwk=epiwk-26
          )
#d1.m.alt$geo <- substr(d1.m.alt$geo,4,5)

last.wk <- max(rsv_ts$MMWRweek[rsv_ts$MMWRyear==max(rsv_ts$MMWRyear)] )


n_years <- length(unique(rsv_ts$epiyr))

output$distPlotRSV3 <- renderPlotly({
  
point_plot <- rsv_ts %>% filter(hhs_abbr==input$hhs.region.select &  epiyr == max(epiyr, na.rm=T) ) %>%
  filter(epiwk==max(epiwk))

rsv_ts1 <- rsv_ts %>%
  filter(x==input$hhs.region.select) %>%
  ggplot(aes(x=epiwk, y=scaled_cases, group=as.factor(epiyr), color=as.factor(epiyr)))+
  geom_line()+
  theme_minimal()+
  xlab('Weeks since July')+
  ylab('RSV positive tests')+
  scale_colour_viridis_d() +
geom_point(data=point_plot,aes(x=epiwk, y=scaled_cases) ,col='red') +
  guides(color=guide_legend(title="Season starting:"))
  

ggplotly(rsv_ts1)
})
```

## Respiratory syncytial virus (RSV) in the United States

::: panel-tabset


### Trends in positive tests

```{r}
#| panel: sidebar

selectInput("hhs.region.select", "HHS Region:", 
            choices=unique(rsv_ts$hhs_abbr), selected='CT,ME,MA,NH,RI,VT')
```

```{r}
#| panel: fill
plotlyOutput("distPlotRSV3")

```


### Trends in Google searches
```{r}
#| panel: fill

```

### Positive tests (all regions)

```{r}
heat1 <- rsv1_tests %>%
  mutate(date= as.Date(substr(mmwrweek_end,1,10 ), '%m/%d/%Y'),
          postdate= as.Date(substr(posted,1,10 ), '%m/%d/%Y')) %>%
  filter(postdate==max(postdate)) %>% 
  ungroup() %>%
  filter(level != 'National') %>%
  group_by(level ) %>%
  left_join(key, by=c('level'='Group.1')) %>%
  mutate(scaled_cases = pcr_detections/max(pcr_detections),
         hhs_abbr=x)

# by each district
ggplot(heat1, aes(date, x, fill = scaled_cases))+
  geom_tile()+ 
  scale_fill_distiller(name = "PCR Positives", 
                       palette = "Blues", 
                       direction = 1,
                       breaks = pretty_breaks())+
  theme(axis.text.y = element_text(size = 3))+
  labs(x = "Date", y = "HHS Region", title ="RSV detections NREVSS")+
   guides(fill="none")+
  theme_minimal()
```

:::

------------------------------------------------------------------------

## Opioids in the United States

```{r}
#| panel: sidebar

selectInput("state.select", "State:", 
            choices=unique(df1$state), selected='US')
```

::: panel-tabset
### Trends in healthcare visits

```{r}
#| panel: fill
plotlyOutput("distPlot1")

```

### Trends in deaths

:::

------------------------------------------------------------------------



## Documentation

### Notes on data sources

------------------------------------------------------------------------ todo todo
